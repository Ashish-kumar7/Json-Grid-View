Description of global Variables

__NULL : 
Used-for : filling null values
type(__NULL) : <class 'str'>
Value : string used to fill missing-data

__JOINER_CHAR : 
Used-for : generating column-headers
type(__JOINER_CHAR) : <class 'str'>
Value : one of ('_' , '.', '-') , used to join child-names to parent-names

__FILL_MISSING_WITH : 
Used-for : filling null values
type(__FILL_MISSING_WITH) : <class 'str'>
Value : string used to fill missing-data

__ADD_INDEX_FOR_LIST : 
Used-for : if True then extra INDEX columns are added in table
type(__ADD_INDEX_FOR_LIST) : <class 'bool'>
Value : True or False

__INDEX_FOR_LIST_SUFFIX : 
Used-for : generating column-header for added INDEX-column when __ADD_INDEX_FOR_LIST is True
type(__ADD_INDEX_FOR_LIST) : <class 'str'>
Value : suffix to add in added-column-header

__reqCols 
Used-for : storing unordered-column-headers for generating table
type(__reqCols) : <class 'set'>
Value: python-set containing column-names of type <class 'str'>    

__reqColsOrd : 
Used-for : storing ordered column-headers for generating table
type(__reqCols) : <class 'list'>
Value: python-list containing column-names of type <class 'str'>

__reqColsOrdNoPar : 
Used-for : storing ordered-column-headers without parent-prefix for generating table
type(__reqCols) : <class 'list'>
Value: python-list containing column-names of type <class 'str'>


__colTree :
Used-for : performing depth-first-search for filling data in table
type(__colTree) : <class 'dict'>
Value: python-dict containing 
    keys   : column-header-prefix of type <class 'str'>
    values : python-set of column-header-prefixes that are child of current-prefix

__colTreeOrd : 
Used-for : performing depth-first-search for filling data in table
type(__colTree) : <class 'dict'>
Value: python-dict containing 
    keys   : column-header-prefix of type <class 'str'>
    values : python-list of column-header-prefixes that are child of current-prefix

__tableSchema : 
Used-for : performing depth-first-search for filling data in table
type(__colTree) : <class 'dict'>
Value: python-dict containing 
    keys   : column-header-prefix of type <class 'str'>
    values : python-set of column-header-prefixes that are child of current-prefix
 
__addedColumns : 
Used-for : storing column-headers added when __ADD_INDEX_FOR_LIST == True
type(__adedColumns) : <class 'set'>
Value: python-set containing column-headers of type <class 'str'> 


Description of functions : 

isScalarData(data):
    Working:    Checks if data is scalar.
    Parameters: data: (list, dict, str, int, float, None)
    Returns:    bool: True or False

isListOfDict(data):
    Working:    Checks if data is list-of-dict.
    Parameters: data: (list, dict, str, int, float, None)
    Returns:    bool: True or False

isScalarList(data):
    Working:    Checks if data is scalar-list.
    Parameters: data: (list, dict, str, int, float, None)
    Returns:    bool: True or False
    Example : 
        isScalarList(['a', 'b', 'c'])          -> True
        isScalarList([{'a' : 'b}, {'c','d'}])  -> False

isScalar(data):
    Working:    Checks if data is scalar(written-as-it-is in table) 
                or iterable( recurred further )
    Parameters: data: (list, dict, str, int, float, None)
    Returns:    bool: True or False
    Example : 
        isScalar(32)            => True
        isScalar('some-string') => True
        isScalar(['a','b'])     => True
        isScalar([ {'a' :'b'} ])=> False
        isScalar({'a' , 'b'})   => False

dfsGenCol(data , pref):
    Working:    Generates column-header-names and table-schema using depth-first-search
    Parameters: data:   dict    :   json-data
                pref:   str     :   prefix-for-column-headers
    Returns: None
    Updates:  __colTree , __colTreeOrd, __reqCols, __reqColsOrd, __reqColsOrdNoPar  

GenTableSchema(data, JOINER_CHAR='.',  ADD_INDEX_FOR_LIST=False,
                   INDEX_FOR_LIST_SUFFIX='Index'):
    Working:    Generates column-header-names and table-schema by calling dfsGenCol
    Parameters: data:   dict    :   json-data
                JOINER_CHAR: str 
                ADD_INDEX_FOR_LIST : bool
                INDEX_FOR_LIST_SUFFIX : str
    Returns: (__reqCols, __colTree, __reqColsOrd, __colTreeOrd, __reqColsOrdNoPar)   

Write(cdf, row, pref, colTree, data, __NULL='null'):
    Working:    Writes data in Pandas-dataframe by performing depth-first-search
    Parameters: cdf:    Pandas-dataframe   
                row:    int     :to keep track of row in df 
                pref:   str     :to keep track of column-header
                colTree:dict    :table-schema to perform dfs
                data:   dict    :json-data
                __NULL: str     :used to fill missing-values
    Returns: None

WriteToDF(cdf, data, colTree) :
    Working:    Writes data in Pandas-dataframe by calling Write
    Parameters: cdf:    Pandas-dataframe   
                colTree:dict    :table-schema to perform dfs
                data:   dict    :json-data
    Returns: None

fillNaN(df) :
    Working:    Copies df.iloc[r-1, c] if df.iloc[r, c] is NaN
    Parameters: df:    Pandas-dataframe 
    Returns: None

WriteDict_NaN_NoIndex(d, row, pref, data) : 
    Working:    Writes data in dict by performing depth-first-search
                fills nan values with __FILL_MISSING_WITH
                No extra Index columns are added
    Parameters: d:    Python-dict  
                row:    int     :to keep track of row in dict
                pref:   str     :to keep track of column-header
                data:   dict    :json-data
    Returns: int : number of rows required to write data

WriteDict_NoIndex(d, row, pref, data) : 
    Working:    Writes data in dict by performing depth-first-search
                No extra Index columns are added
    Parameters: d:    Python-dict  
                row:    int     :to keep track of row in dict
                pref:   str     :to keep track of column-header
                data:   dict    :json-data
    Returns: int : number of rows required to write data

WriteDict_Index(d, row, pref, data) : 
    Working:    Writes data in dict by performing depth-first-search
                Extra Index columns are added
    Parameters: d:    Python-dict  
                row:    int     :to keep track of row in dict
                pref:   str     :to keep track of column-header
                data:   dict    :json-data
    Returns: int : number of rows required to write data

GenCrossSchema(pref, prefId, data, schema): 
    Working:    Generates schema for Cross-product-table by performing depth-first-search
    Parameters: pref:   str     :to keep track of column-header
                prefid: str     :to keep track of list-indexes-after-dfs
                data:   dict    :json-data
                schema: dict    :cross-product-table schema
    Returns: int : number of rows required to write data

GenCrossDict(pref, prefId, row, Dict, data, schema): 
    Working:    Generates data-dict for Cross-product-table by performing depth-first-search
    Parameters: pref:   str     :to keep track of column-header
                prefid: str     :to keep track of list-indexes-after-dfs
                row:    int     :to keep track of row in Dict
                Dict:   dict    :data-dict for generating dataframe 
                data:   dict    :json-data
                schema: dict    :cross-product-table schema
    Returns: None

WriteData(DataDict, Data, tableSchema, FILL_MISSING_WITH='null', ADD_INDEX_FOR_LIST=False,
              INDEX_FOR_LIST_SUFFIX='INDEX', GEN_CROSS_TABLE=False): 
    Working:    Fills DataDict by calling appropriate functions depending on parameters
    Parameters: DataDict:   dict    :to store row-data for generating DataFrame
                Data:       dict    :json-data
                tableSchema:dict    :table-schema for performing depth-first-search
                FILL_MISSING_WITH:      str : value used for filling missing-values
                ADD_INDEX_FOR_LIST:     bool: if True extra INDEX columns are added to table
                INDEX_FOR_LIST_SUFFIX:  str : suffix for added-index-columns 
                GEN_CROSS_TABLE:        bool: if True, cross-product-table is generated
    Returns: None

Encode(obj): 
    Working:    Convert numpy data-types to python data-types
    Parameters: obj:   any-data-type    : data to convert
    Returns: converted-obj

GenPageData(PreviewDF, prevQueryCols, selected_col, selected_page, rows_per_page): 
    Working:    returns unique values from selected_page for selected_col
    Parameters: PreviewDF:      dataframe:  dataframe for reading unique values
                prevQueryCols:  dict:       cache for previous queries      
                selected_col:   str:        selected column
                selected_page:  int:        selected page
                rows_per_page:  int:        number of unique values per page
    Returns:    list:   list of unique values

queryUsingDict(df, queryDict): 
    Working:    applies multi-select queries on df
    Parameters: df:         dataframe:  dataframe for applying queries
                queryDict:  dict:       contains column-names and selected-values     
    Returns:    dataframe:   dataframe after applying queries

queryUsingForm(df, queryDict): 
    Working:    applies auto-complete queries on df
    Parameters: df:         dataframe:  dataframe for applying queries
                queryDict:  dict:       contains column-names and text-to-complete    
    Returns:    dataframe:   dataframe after applying queries

DeleteIfExists(FileName): 
    Working:    deletes file if it exists
    Parameters: FileName:         str:  name of the file to delete
    Returns:    None

GenReactDataGridRows(tableRows, df, ROWS_PER_PAGE, SELECTED_PAGE): 
    Working:    generate row-dict for React-Data-Grid
    Parameters: tableRows:      dict:       row-dict for react-data-grid
                df:             dataframe:  for reading data
                ROWS_PER_PAGE:  int:        number of rows to display per page
                SELECTED_PAGE:  int:        selected page
    Returns:    None